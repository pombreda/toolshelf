{"name":"toolshelf","tagline":"a package installer which neither packages nor installs","body":"toolshelf\r\n=========\r\n\r\nFirst, the metaphor:\r\n\r\nCertain bulky technologies in your home — such as your washing machine and your\r\nrefrigerator (let's call them appliances) — deserve to be *installed*.  You're\r\nnot going to move them much, and they might have to be hooked up to the water\r\npipes and so forth.\r\n\r\nBut certain other, lighter technologies — such as your can opener and your \r\nbroom and dustpan (let's call them tools) — aren't \"installed\" anywhere.\r\nInstead, you simply store them somewhere (say, on a shelf) until they're needed.\r\n\r\n`toolshelf` applies this paradigm to software.  Because you should never need to\r\n*install* a can opener.\r\n\r\nIf this metaphor piques your curiosity, you can read more about\r\n[why `toolshelf` exists, where it shines, and where it doesn't](https://github.com/catseye/toolshelf/blob/master/doc/Philosophy.markdown)\r\n(tl;dr great for evaluating random projects off Github, maybe not so great\r\nfor getting X.org onto a machine.)\r\n\r\nDescription\r\n-----------\r\n\r\n`toolshelf` is a \"package manager\" which doesn't actually install any files.\r\nInstead, it:\r\n\r\n*   stores (\"docks\") the source distributions of projects in a directory tree\r\n    (usually located in your home directory);\r\n*   builds executables, libraries, etc. as needed in these source directories;\r\n*   creates \"link farms\" of symlinks to these executables, libraries, etc.; and \r\n*   manages your search paths to include these link farms.\r\n\r\nThe source distributions are typically version-controlled working directories\r\n(e.g. a local clone of a Git repository), but they can also be directory\r\nstructures extracted from downloaded archives (so-called \"tarballs\" or\r\n\"distfiles\".)\r\n\r\n`toolshelf` is a **work in progress**, currently **version 0.1-PRE**, and\r\nsubject to change.  It is written in Python 2.7, with some supporting scripts\r\nin Bourne shell.  It also requires the presence of those tools it needs to use\r\nto get and build what it asks for.  Obviously, the less you ask for, the less\r\nit needs, but at least some of the following will be helpful:\r\n\r\n*   `git` or `hg` (Mercurial)\r\n*   `wget`\r\n*   `tar` and `gzip` and/or `bzip2`\r\n*   `unzip`\r\n*   `make`\r\n\r\n(It is also probably better if you use a Bourne-shell-based shell, such as\r\n`bash` or `ash`, as your interactive shell; otherwise you may lack some\r\nfunctions such as `toolshelf_cd`.  I have not tested it with `csh`, `zsh`, etc.)\r\n\r\n`toolshelf` is distributed under an MIT-style license.\r\n\r\nQuick Start\r\n-----------\r\n\r\n*   Start a shell.  (On some OS'es, this means \"Open a Terminal window.\")\r\n    \r\n*   Download [`bootstrap-toolshelf.sh`][], for example by running:\r\n  \r\n        wget https://raw.github.com/catseye/toolshelf/master/bootstrap-toolshelf.sh\r\n    \r\n    (If you don't have `wget` installed, `curl` should also work.  Or you can\r\n    just download it from the link above with your web browser.)\r\n    \r\n*   Run:\r\n    \r\n        . ./bootstrap-toolshelf.sh\r\n    \r\n*   Follow the instructions given to you by the script.\r\n\r\n[`bootstrap-toolshelf.sh`]: https://raw.github.com/catseye/toolshelf/master/bootstrap-toolshelf.sh\r\n\r\n(If you don't want to use the bootstrap script, it's not very difficult to\r\nget toolshelf up and running manually; see below for instructions.)\r\n\r\nNow, you can dock any source that `toolshelf` can handle, simply by typing,\r\nfor example,\r\n\r\n    toolshelf dock gh:nelhage/reptyr\r\n\r\nWhen that completes, you can run `reptyr` by simply typing\r\n\r\n    reptyr\r\n\r\nConvenient!  And if you want to `cd` to where the `reptyr` sources are, to\r\nhack on it or whatever, just\r\n\r\n    toolshelf_cd reptyr\r\n\r\nAnd if you ever want to get rid of (almost) all trace of `reptyr` from your\r\nsystem, simply run\r\n\r\n    rm -rf $TOOLSHELF/nelhage/reptyr\r\n\r\n(For removal to be completely complete, you'd also want to run\r\n`toolshelf relink all`, to remove the now-broken symbolic links to the\r\nexecutable(s) that were in `$TOOLSHELF/nelhage/reptyr`.)\r\n\r\nAnd, if you want to get rid of (almost) all trace of `toolshelf` and all of\r\nthe packages you've docked using it, simply\r\n\r\n    rm -rf $TOOLSHELF\r\n\r\n(For removal to be completely complete, you'd also want to remove the commands\r\nthat `bootstrap-toolshelf.sh` added to your `.bashrc`.  But if your `$TOOLSHELF`\r\ndirectory doesn't exist, they won't run anyway.)\r\n\r\nFor a summary of the `toolshelf` commands, run `toolshelf --help`.  If you\r\nwant to know more about how it works, you can read about\r\n[`toolshelf`'s theory of operation](https://github.com/catseye/toolshelf/blob/master/doc/Theory_of_Operation.markdown).\r\n\r\nManual Setup\r\n------------\r\n\r\n*   Decide where you want your toolshelf sources to be kept.  I keep mine\r\n    in a directory called `toolshelf` in my home directory.  In the following\r\n    examples, I'll use `/home/user/toolshelf`.  It is strongly recommended\r\n    that this pathname not contain any spaces or other characters which\r\n    normally require escaping for the shell; even if `toolshelf` handles all\r\n    these cases correctly, there's a fair chance any random source that you\r\n    dock won't.\r\n    \r\n*   Make this directory:\r\n    \r\n        mkdir -p /home/user/toolshelf\r\n    \r\n*   Clone the `toolshelf` repo into `.toolshelf` in it, perhaps like so:\r\n    \r\n        git clone https://github.com/catseye/toolshelf /home/user/toolshelf/.toolshelf\r\n    \r\n    If you prefer, you could use Mercurial and clone it [from Bitbucket](https://bitbucket.org/catseye/toolshelf).\r\n    Or get a zip of the `toolshelf` distribution, and unzip it to there.  Any\r\n    of these options should be fine.\r\n\r\n*   Add the following line to your `.profile`, or `.bash_profile`, or\r\n    `.bashrc`, or the startup script for whatever POSIX-compliant Bourne\r\n    shell-alike you use:\r\n    \r\n        export TOOLSHELF=/home/user/toolshelf/ && . $TOOLSHELF/.toolshelf/init.sh\r\n\r\n*   Start a new shell and test that it works.\r\n\r\nRelated Work\r\n------------\r\n\r\n*   [checkoutmanager](https://bitbucket.org/reinout/checkoutmanager)\r\n*   [Gobolinux](http://gobolinux.org/)\r\n*   [pathify](https://github.com/kristi/pathify)\r\n*   [sources](https://github.com/trentm/sources)\r\n*   [spackle](https://github.com/kristi/spackle)\r\n*   `zero-install`/`0launch`\r\n*   `pkgviews`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}